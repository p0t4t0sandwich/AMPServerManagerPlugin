import org.spongepowered.gradle.plugin.config.PluginLoaders
import org.spongepowered.plugin.metadata.model.PluginDependency

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id("org.spongepowered.gradle.plugin") version "2.0.2"
    id 'java'
}

group = 'ca.sperrer.p0t4t0sandwich'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.8-R0.1-SNAPSHOT"
    compileOnly "net.md-5:bungeecord-api:1.12-SNAPSHOT"
    shadow "dev.dejvokep:boosted-yaml:1.3"
    shadow 'com.github.p0t4t0sandwich:ampapi-java:ampapi-1.0.3'
}

sponge {
    apiVersion("8.2.0-SNAPSHOT")
    license("All-Rights-Reserved")
    loader {
        name(PluginLoaders.JAVA_PLAIN)
        version("1.0")
    }
    plugin("ampservermanager") {
        displayName("AMPServerManager")
        entrypoint("ca.sperrer.p0t4t0sandwich.ampservermanager.sponge8.SpongeMain")
        description("AMPServerManager is a plugin that allows you to manage your AMP servers from within Minecraft.")
        links {
            // homepage("https://spongepowered.org")
            // source("https://spongepowered.org/source")
            // issues("https://spongepowered.org/issues")
        }
        dependency("spongeapi") {
            loadOrder(PluginDependency.LoadOrder.AFTER)
            optional(false)
        }
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.runtimeClasspath, project.configurations.shadow]
    dependencies {
        include dependency("dev.dejvokep:boosted-yaml:1.3")
        include dependency("com.github.p0t4t0sandwich:ampapi-java:ampapi-1.0.3")
    }
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.build.dependsOn(shadowJar)

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    filesMatching('bungee.yml') {
        expand props
    }
}
